###############################################################################
# Web Technology at VU University Amsterdam
# Assignment 3
#
# The assignment description is available on Canvas.
# This is a template for you to quickly get started with Assignment 3.
# Read through the code and try to understand it.
#
# Have you looked at the documentation of bottle.py?
# http://bottle.readthedocs.org/en/stable/index.html
#
# Once you are familiar with bottle.py and the assignment, start implementing
# an API according to your design by adding routes.
###############################################################################

# Include more methods/decorators as you use them
# See http://bottle.readthedocs.org/en/stable/api.html#bottle.Bottle.route

from bottle import response, error, get, put, post, delete, request, abort
import json, urlparse

# function to make unicode (out of url content)
def make_unicode(input):
    if type(input) != unicode:
        input =  input.decode('utf-8')
        return input
    else:
        return input
# check if it is a float (for screensize)
def is_float(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
# check if it is integer (for id)
def is_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

###############################################################################
# Routes
#
# TODO: Add your routes here and remove the example routes once you know how
#       everything works.
###############################################################################


########################## GET ALL FROM THE DATABASE ###########################
@get('/dbase')
def get_all(db):
    # go do sQl
    db.execute("SELECT id, brand, model, os, image, screensize FROM phones")
    phones_all = db.fetchall()
    # set headers for response & return
    response.content_type = 'application/json'
    return json.dumps(phones_all)


###################### GET ONE ITEM FROM THE DATABASE ##########################
# search based on: model & brand
@get('/dbase/<url_params>')
def get_one(url_params, db):
    # create a python dictionary from the url_params
    urlDict = dict((k.strip(), v.strip()) for k,v in
             (item.split('=') for item in url_params.split('&')))

    # are all search keys present?
    while True:
        try:
            if urlDict.viewkeys() & {'model', 'brand'}:
                break
        except ValueError:
            # send 400, when bad request
            abort(400, "Search parameters not correct")

    # make unicodes from the values found at particular keys
    model = make_unicode(urlDict["model"])
    brand = make_unicode(urlDict["brand"])
    # go do sQl
    db.execute("""SELECT id, brand, model, os, image, screensize
                    FROM phones WHERE [model]=? AND brand=?""", (model, brand))
    phones_all = db.fetchall()
    # values to JSON
    phones_all = json.dumps(phones_all)

    # check if an item is generated by length
    while True:
        try:
            if len(phones_all)<5:
                raise ValueError(404)
            else:
                break
        except ValueError:
            # send 404, when not found
            abort(404, "Rightfull search, but no item found")

    # set headers for response & return
    response.content_type = 'application/json'
    return phones_all


#################### CHANGE ONE ITEM IN THE DATABASE ###########################
@put('/dbase/put/<url_params>')
def put_one(url_params, db):
    # get & check the json from the body
    while True:
        try:
            item = request.json
            if item is None:
                raise ValueError
            if not item.viewkeys() & {'model', 'brand', 'image', 'screensize', 'os'}:
                raise ValueError
            if not is_float(item['screensize']):
                raise ValueError
            if not is_integer(url_params):
                raise KeyError
            else:
                break
        except ValueError:
            # send 400, when incorrect json
            abort(400, "Incorrect JSON (also make sure screensize is a number)")
        except KeyError:
            # send 400, when id is not an integer
            abort(400, "Id is not an integer")

    # go do sQl
    db.execute("""UPDATE phones
                    SET brand=?, model=?, os=?, image=?,
                    screensize=? WHERE id=?""",
                    (item['brand'], item['model'], item['os'], item['image'], item['screensize'], url_params))

    # set headers for response
    response.content_type = 'application/json'
    response.set_header('Content-Language', 'en')
    # return a response
    model = item.get('model')
    brand = item.get('brand')
    responsJ = {"Updated": "item", "model" : model, "brand" : brand}
    return json.dumps(responsJ)


###################### POST ONE NEW ITEM TO THE DATABASE #######################
@post('/dbase/post')
def post_one(db):
    # get & check json from the body
    while True:
        try:
            item = request.json
            if item is None:
                raise ValueError
            if not item.viewkeys() & {'model', 'brand', 'image', 'screensize', 'os'}:
                raise ValueError
            if not is_float(item['screensize']):
                raise ValueError
            else:
                break
        except ValueError:
            # send 400, when incorrect json
            abort(400, "Incorrect JSON (also make sure screensize is a number)")

    # create a new item into phones and paste the values from the body
    db.execute(""" INSERT INTO phones (brand, model, os, image, screensize)
                VALUES (?, ?, ?, ?, ?)""",
                (item['brand'], item['model'], item['os'], item['image'],  item['screensize']))

    # set headers for response
    response.content_type = 'application/json'
    response.set_header('Content-Language', 'en')
    # return a response
    model = item.get('model')
    brand = item.get('brand')
    responsJ = {"Posted": "item", "model" : model, "brand" : brand}
    return json.dumps(responsJ)

################# DELETE ONE, or more, ITEMs FROM THE DATABASE #################
@delete('/dbase/delete/<url_params>')
def delete_one(url_params, db):
    # check the id to be integer
    while True:
        try:
            if not is_integer(url_params):
                raise KeyError
            else:
                break
        except KeyError:
            # send 400, when id is not an integer
            abort(400, "Id is not an integer")

    # go do sQl
    db.execute("DELETE FROM phones WHERE id=?", (url_params,))

    # set headers
    response.content_type= 'application/json'
    response.set_header('Content-Language', 'en')
    # return a respons
    responsJ = {"Deleted": "from phones", "item- id": url_params}
    return json.dumps(responsJ)


###############################################################################
# Error handling
#
# TODO (optional):
#       Add sensible error handlers for all errors that may occur when a user
#       accesses your API.
###############################################################################

# Done inside the function / handlers


###############################################################################
# This starts the server
#
# Access it at http://localhost:8080
#
# If you have problems with the reloader (i.e. your server does not
# automatically reload new code after you save this file), set `reloader=False`
# and reload manually.
#
# You might want to set `debug=True` while developing and/or debugging and to
# `False` before you submit.
#
# The installed plugin 'WtPlugin' takes care of enabling CORS (Cross-Origin
# Resource Sharing; you need this if you use your API from a website) and
# provides you with a database cursor.
###############################################################################

if __name__ == "__main__":
    from bottle import install, run
    from wtplugin import WtDbPlugin, WtCorsPlugin

    install(WtDbPlugin())
    install(WtCorsPlugin())
    run(host='localhost', port=8080, reloader=True, debug=True, autojson=False)
